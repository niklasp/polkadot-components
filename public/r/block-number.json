{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "block-number",
  "type": "registry:component",
  "title": "Block Number",
  "description": "A simple block number component that displays the current block number from Polkadot Asset Hub. Requires polkadot-api setup.",
  "dependencies": [
    "@tanstack/react-query",
    "polkadot-api"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/block-number/components/block-number.tsx",
      "content": "\"use client\";\nimport { useBlockNumber } from \"../hooks/use-block-number\";\n\nexport function BlockNumber() {\n  const blockNumber = useBlockNumber();\n\n  return <div>{blockNumber?.toString()}</div>;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/block-number/hooks/use-block-number.ts",
      "content": "\"use client\";\nimport { usePolkadot } from \"@/registry/new-york/providers/polkadot-provider\";\nimport { useEffect, useState } from \"react\";\n\nexport function useBlockNumber() {\n  const { api } = usePolkadot();\n  const [blockNumber, setBlockNumber] = useState<number | null>(null);\n\n  useEffect(() => {\n    const subscription = api?.query.System.Number.watchValue(\"best\").subscribe(\n      (value) => {\n        setBlockNumber(value);\n      }\n    );\n\n    return () => {\n      subscription?.unsubscribe();\n    };\n  }, [api]);\n\n  return blockNumber;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/providers/polkadot-provider.tsx",
      "content": "\"use client\";\n\nimport { createClient, TypedApi } from \"polkadot-api\";\nimport { getWsProvider } from \"polkadot-api/ws-provider/web\";\nimport { withPolkadotSdkCompat } from \"polkadot-api/polkadot-sdk-compat\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\n// Dynamic import to get available descriptors\nconst getDescriptors = async () => {\n  try {\n    // This will be dynamically updated by the CLI to import the correct chain\n    const descriptors = await import(\"@polkadot-api/descriptors\");\n    return descriptors;\n  } catch (error) {\n    console.error(\"Failed to load polkadot-api descriptors:\", error);\n    throw new Error(\"Polkadot API descriptors not found. Please run: npx papi\");\n  }\n};\n\n// Default endpoints for common chains\nconst getChainEndpoint = (chainName: string): string => {\n  const endpoints: Record<string, string> = {\n    polkadot: \"wss://rpc.polkadot.io\",\n    kusama: \"wss://kusama-rpc.polkadot.io\",\n    westend: \"wss://westend-rpc.polkadot.io\",\n    rococo: \"wss://rococo-rpc.polkadot.io\",\n    asset_hub_polkadot: \"wss://polkadot-asset-hub-rpc.polkadot.io\",\n    asset_hub_kusama: \"wss://kusama-asset-hub-rpc.polkadot.io\",\n    paseo_asset_hub: \"wss://sys.ibp.network/asset-hub-paseo\",\n  };\n\n  return endpoints[chainName] || endpoints.polkadot;\n};\n\nexport interface PolkadotContextType {\n  api: TypedApi<any> | null;\n  chainName: string | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport const PolkadotContext = createContext<PolkadotContextType>({\n  api: null,\n  chainName: null,\n  isLoading: true,\n  error: null,\n});\n\nexport function PolkadotProvider({ children }: { children: React.ReactNode }) {\n  const [api, setApi] = useState<TypedApi<any> | null>(null);\n  const [chainName, setChainName] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const initializeApi = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        // Dynamically load descriptors\n        const descriptors = await getDescriptors();\n\n        // Get the first available chain descriptor\n        const descriptorKeys = Object.keys(descriptors).filter(\n          (key) =>\n            key !== \"default\" && typeof (descriptors as any)[key] === \"object\"\n        );\n\n        if (descriptorKeys.length === 0) {\n          throw new Error(\"No chain descriptors found\");\n        }\n\n        // Prefer polkadot if available, otherwise use the first one\n        const selectedChain = descriptorKeys.includes(\"polkadot\")\n          ? \"polkadot\"\n          : descriptorKeys[0];\n\n        const chainDescriptor = (descriptors as any)[selectedChain];\n        const endpoint = getChainEndpoint(selectedChain);\n\n        console.log(`Connecting to ${selectedChain} at ${endpoint}`);\n\n        // Create client with the selected chain\n        const client = createClient(\n          withPolkadotSdkCompat(getWsProvider(endpoint))\n        );\n\n        // Get typed API for the selected chain\n        const typedApi = client.getTypedApi(chainDescriptor);\n\n        if (isMounted) {\n          setApi(typedApi);\n          setChainName(selectedChain);\n          setIsLoading(false);\n          console.log(`Successfully connected to ${selectedChain}`);\n        }\n      } catch (error) {\n        console.error(\"Failed to initialize Polkadot API:\", error);\n        if (isMounted) {\n          setError(error instanceof Error ? error.message : \"Unknown error\");\n          setIsLoading(false);\n        }\n      }\n    };\n\n    initializeApi();\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return (\n    <PolkadotContext.Provider value={{ api, chainName, isLoading, error }}>\n      {children}\n    </PolkadotContext.Provider>\n  );\n}\n\nexport function usePolkadot() {\n  const context = useContext(PolkadotContext);\n  if (!context) {\n    throw new Error(\"usePolkadot must be used within a PolkadotProvider\");\n  }\n  return context;\n}\n",
      "type": "registry:file",
      "target": "providers/polkadot-provider.tsx"
    }
  ]
}